def read(input):
  try:
    nfa = json.load(open(input,"r"))
    for i in nfa["f"]:
      if not i in nfa["k"]:
        raise Exception("Set f contains iterms that not belongs to set k.")
      for j in nfa["f"][i]:
        if not j in nfa["e"] and not j == '#':
          raise Exception("Set f contains iterms that not belongs to set e.")
    return (set(nfa["k"]), set(nfa["e"]), nfa["f"], set(nfa["s"]), set(nfa["z"]))
  except IOError:
    print ("File no found!")
    sys.exit(1)
  except (KeyError, TypeError):
    print ("Input data error!")
    sys.exit(1)
  # except Exception e:
  #   print(e.args[0])
    sys.exit(1)

def creat_memo(e_set):
  memo = {}
  for i in e_set:
    memo[i] = {}
  memo['#'] = {}
  return memo

def move(f, memo, s, arc):
  return closure(f, memo[arc], s, arc)

def ep_closure(f, memo, s):
  return closure(f, memo["#"], s, '#')

def closure(f, memo, c_set, arc):
  res = set()
  for s in c_set:
    if not s in memo:
      memo[s] = set()
      if arc == '#':
        #Attention here. Has to be a list
        memo[s] = set([s])
      if s in f:
        if arc in f[s]:
          if arc == '#':
            memo[s] |= closure(f, memo, set(f[s][arc]), arc)
          else:
            memo[s] = set(f[s][arc])
    res |= memo[s]
  return res

def creat_dfa(e_set):
  dfa = {}
  dfa["k"] = []
  dfa["e"] = list(e_set)
  dfa["f"] = {}
  dfa["s"] = []
  dfa["z"] = []
  return dfa
def calc_dfa(k_set, e_set, f, s_set, z_set):
  dfa = creat_dfa(e_set)
  dfa_set = []
  memo = creat_memo(e_set)
  ep = ep_closure(f, memo, s_set)
  #Attention here. Has to be a list
  queue = deque([ep])
  dfa_set.append([ep])
  dfa["k"].append("0")
  dfa["s"].append("0")
  if not len(ep&z_set) == 0:
    dfa["z"].append("0")
  i = 0
  while queue:
    T = queue.popleft()
    j = ""
    index = str(i)
    i = i + 1
    dfa["f"][index] = {}
    for s in e_set:
      t = ep_closure(f, memo, move(f, memo, T, s))
      try:
        j = str(dfa_set.index(t))
      except ValueError:
        queue.append(t)
        j = str(len(dfa_set))
        dfa_set.append(t)
        dfa["k"].append(j)
      dfa["f"][index][s] = j
      if not len(t&s_set) == 0:
        dfa["s"].append(j)
      if not len(t&z_set) == 0:
        dfa["z"].append(j)
  return dfa

def write_dfa(dfa, f):
  f = open(f, "w")
  f.write(json.dumps(dfa))
  f.close()
def main():
  (k_set, e_set, f, s_set, z_set) = read("NFA.json")
  dfa = calc_dfa(k_set, e_set, f, s_set, z_set)
  write_dfa(dfa, "DFA.json")
  print ("hello world!")
  
# if __name__ == '__main__'